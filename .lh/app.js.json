{
    "sourceFile": "app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757865753028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757865753027,
            "name": "Commit-0",
            "content": "    document.addEventListener('DOMContentLoaded', function() {\r\n        // Initialize AOS animations\r\n        AOS.init({\r\n            duration: 800,\r\n            once: true\r\n        });\r\n\r\n        // Resume download functionality\r\n        document.getElementById('download-resume').addEventListener('click', function() {\r\n            window.open('Resume.pdf', '_blank');\r\n        });\r\n\r\n        // Role changer animation\r\n        const roles = [\"Frontend Developer\", \"Data Enthusiast\", \"Designer\", \"Data Analyst\"];\r\n        let roleIndex = 0;\r\n        const roleElement = document.getElementById('role-changer');\r\n        \r\n        function changeRole() {\r\n            roleElement.style.opacity = 0;\r\n            setTimeout(() => {\r\n                roleElement.textContent = roles[roleIndex];\r\n                roleElement.style.opacity = 1;\r\n                roleIndex = (roleIndex + 1) % roles.length;\r\n            }, 500);\r\n        }\r\n        \r\n        setInterval(changeRole, 3000);\r\n\r\n        // Video Elements\r\n        const videoElements = [\r\n            { id: 'projectVideo1', hoverElement: document.querySelector('.hover-sign') },\r\n            { id: 'projectVideo2', hoverElement: null },\r\n            { id: 'projectVideo3', hoverElement: null },\r\n            { id: 'projectVideo4', hoverElement: null }\r\n        ].map(item => {\r\n            const video = document.getElementById(item.id);\r\n            if (!video) {\r\n                console.error(`Video element with ID ${item.id} not found`);\r\n                return null;\r\n            }\r\n            return { video, hoverElement: item.hoverElement };\r\n        }).filter(item => item !== null);\r\n\r\n        // Sidebar Elements\r\n        const sideBar = document.querySelector('.sidebar');\r\n        const menuButton = document.querySelector('.menu-icon');\r\n        const closeButton = document.querySelector('.close-icon');\r\n\r\n        if (!sideBar || !menuButton || !closeButton) {\r\n            console.error('One or more sidebar elements not found');\r\n        }\r\n\r\n        // Video Interaction Functions\r\n        function setupVideoInteractions() {\r\n            videoElements.forEach(({ video, hoverElement }) => {\r\n                if (!video) return;\r\n\r\n                // Play/pause on hover\r\n                video.addEventListener('mouseenter', () => {\r\n                    video.play().catch(e => console.error('Video play failed:', e));\r\n                    if (hoverElement) hoverElement.classList.add('active');\r\n                });\r\n\r\n                video.addEventListener('mouseleave', () => {\r\n                    video.pause();\r\n                    if (hoverElement) hoverElement.classList.remove('active');\r\n                });\r\n\r\n                // Keyboard accessibility\r\n                video.addEventListener('focus', () => {\r\n                    video.play().catch(e => console.error('Video play failed:', e));\r\n                    if (hoverElement) hoverElement.classList.add('active');\r\n                });\r\n\r\n                video.addEventListener('blur', () => {\r\n                    video.pause();\r\n                    if (hoverElement) hoverElement.classList.remove('active');\r\n                });\r\n\r\n                // Touch device support\r\n                video.addEventListener('touchstart', () => {\r\n                    if (video.paused) {\r\n                        video.play().catch(e => console.error('Video play failed:', e));\r\n                    } else {\r\n                        video.pause();\r\n                    }\r\n                }, { passive: true });\r\n            });\r\n        }\r\n\r\n        // Sidebar Functions\r\n        function setupSidebar() {\r\n            if (!sideBar || !menuButton || !closeButton) return;\r\n\r\n            // Toggle sidebar\r\n            const toggleSidebar = (open) => {\r\n                if (open) {\r\n                    sideBar.classList.remove('close-sidebar');\r\n                    sideBar.classList.add('open-sidebar');\r\n                    document.body.style.overflow = 'hidden';\r\n                } else {\r\n                    sideBar.classList.remove('open-sidebar');\r\n                    sideBar.classList.add('close-sidebar');\r\n                    document.body.style.overflow = '';\r\n                }\r\n            };\r\n\r\n         menuButton.addEventListener('click', (event) => {\r\n    event.stopPropagation();\r\n    toggleSidebar(true);\r\n});\r\ncloseButton.addEventListener('click', () => toggleSidebar(false));\r\n\r\nsideBar.addEventListener('click', (event) => {\r\n    event.stopPropagation();\r\n});\r\n\r\ndocument.addEventListener('click', (e) => {\r\n    if (sideBar.classList.contains('open-sidebar') && \r\n        !sideBar.contains(e.target) && \r\n        e.target !== menuButton) {\r\n        toggleSidebar(false);\r\n    }\r\n});\r\n\r\n\r\n            // Close sidebar with Escape key\r\n            document.addEventListener('keydown', (e) => {\r\n                if (e.key === 'Escape' && sideBar.classList.contains('open-sidebar')) {\r\n                    toggleSidebar(false);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Smooth scrolling for navigation\r\n        function setupSmoothScrolling() {\r\n            document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n                anchor.addEventListener('click', function(e) {\r\n                    e.preventDefault();\r\n                    const target = document.querySelector(this.getAttribute('href'));\r\n                    if (target) {\r\n                        target.scrollIntoView({\r\n                            behavior: 'smooth'\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // Initialize all functionality\r\n        function init() {\r\n            setupVideoInteractions();\r\n            setupSidebar();\r\n            setupSmoothScrolling();\r\n            \r\n            // Set tabindex for keyboard accessibility\r\n            videoElements.forEach(({ video }) => {\r\n                if (video) video.setAttribute('tabindex', '0');\r\n            });\r\n        }\r\n\r\n        init();\r\n    });\r\n"
        }
    ]
}